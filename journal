#! /bin/bash

# Uses environment variable $JOURNALPATH

# ----------------------------------------
#Globals Constants
# ----------------------------------------
readonly origIFS=$IFS
readonly progVer="2.2"
readonly progName=$(basename $0)
readonly dashLineLength=60
readonly uninitialized="UNINITIALIZED"
readonly arg1=$1
readonly argList=$*

# ----------------------------------------
# File locations
# ----------------------------------------
# Now read from the $JOURNALPATH env variable

# ----------------------------------------
# Globals
# ----------------------------------------
debug="TRUE"    #debug
debug="FALSE"   #debug

# ----------------------------------------
# Libraries
# ----------------------------------------
libList="${HOME}/bin/lib/dashline"

for i in $libList; do
    if [[ -r $i ]]; then    # Does it exist?
        . $i                # Source the library file.
    else
        printf "%s\n" "ERROR: Library file not found. Could not source library file."
        printf "%s\n" "File: $i"
        exit
    fi
done

# ----------------------------------------
  function ProgUsage () {
# ----------------------------------------
  printf "\
Name
  $progName [ <file number> ] | -h

Where
  <journal file> is one of
     0: work      : Work stuff <default>
     1: personal  : Personal topics and reflections
     2: grat      : Gratitude journal
     3: agile     : Agile related stuff
     4: invest    : Investments. Was previosly in \"personal\" file
     5: job       : Job search
     6: Rotary    : Rotary
     7: PDA       : Product Delivery Alchemy
     8: divorce   : Open a file on my personal DropBox

  If no <file number> is provided, defaults to 0.

Journal files paths are stored in an environment variable \$JOURNALPATH

Files
"
  PrintEnvFileNames

}   # function

# ----------------------------------------
  function PrintEnvFileNames () {
# ----------------------------------------
# Print each file name in the env variable.

    loopCounter=0
    for fname in ${fileList[@]}; do
        printf "%s\n" "    ${fileList[$loopCounter]}"
        ((loopCounter++))
    done    # for
 
}   # function


# ----------------------------------------
  function PrintProgVer () {
# ----------------------------------------
    printf "%s\n" "
ver. $progVer
"
}   # function

# ----------------------------------------
  function Initialize () {
# ----------------------------------------
    # Check to assure the search path environment variable is set.
    # If not set, then exit
    if [[  -z ${JOURNALPATH:-} ]]; then
        printf "%s\n" "\
ERROR: Environment variable not set.
       The CONTACTSPATH variable must contain a list of files.
"
       exit 1
   elif [ "$debug" == "TRUE" ]; then
        printf "%s\n" "++ JOURNALPATH ...................... $JOURNALPATH"
    fi

    # Put the colon separated ENV var into an array
    # Convert the JOURNALPATH string into the array fileList.
    fileList=($(echo "$JOURNALPATH" | tr ':' '\n'))

    # Identify how many files are listed in the $JOURNALPATH
    fileCount=${#fileList[@]}
    
    if [ "$debug" == "TRUE" ]; then
        printf "%s\n" "++ File count ....................... $fileCount"
    fi

}   #function

# ----------------------------------------
# ----------------------------------------
# main Main MAIN
# ----------------------------------------
# ----------------------------------------

#debug="TRUE"
if [ "$debug" == "TRUE" ]; then
    DashLine $dashLineLength "-"
    printf "%s\n" "++ arg1 ............................. $arg1"
    printf "%s\n" "++ arg list ......................... $argList"
fi
#debug="FALSE"

Initialize

if [[ ${arg1} = "-h" ]]; then
    ProgUsage
    exit
# Select the file by file number
elif [[ ${arg1} -ge 0 ]] && [[ ${arg1} -lt ${fileCount} ]]; then
    targetFile=${fileList[$arg1]}
else
    printf "%s\n" "++ ERROR: <journal file> not known: $arg1"
    printf "%s\n"
    ProgUsage
    exit 1      # Error = 1
fi

if [[ ! -w $targetFile ]]; then
    printf "%s\n" "++ ERROR: Cannot open journal file."
    printf "%s\n" "   File: $targetFile"
    exit 2      # Error = 2
fi
    

if [ "$debug" == "TRUE" ]; then
    printf "%s\n" "++ Target file ...................... $targetFile"
    printf "%s\n" "++ Here's where we would start vi on the target file, but we're in debug mode."
else
    vi "$targetFile"   #orig
fi

PrintProgVer

# ----------------------------------------
# ----------------------------------------
  exit 0  # Without this, the comment section will execute and error out.
# ----------------------------------------
# ----------------------------------------

-------------
-- ToDo    --
-------------
Want to re-architect file locations. Desires
- Keep it on a network available drive
- All <filename>.txt should be in the Sync/journal/<name> hierarchy
- All journal file names should be <name>_journal_file.txt
- These changes make it easier to find the files in a predictable location
  instead of maintaining a file lookup mechanism. Plan to make those changes
  when I re-implement in python.

-------------
-- History --
-------------

----------------------------------------------------------------------
 2022-12-02
 journal, version 2.2
----------------------------------------------------------------------
Big rewrite, refactoring.
Now reads files listed in the $JOURNALFILES env var.

Syntax changed to 
journal <number> | -h 
where number selects the file.
Got rid of the hardcoded file seclection.

----------------------------------------------------------------------
 2021-09-20
 journal, version 2.1
----------------------------------------------------------------------
Added a "pda" option.

----------------------------------------------------------------------
 2021-02-14
 journal, version 1.4
----------------------------------------------------------------------

----------------------------------------------------------------------
 2020-03-01
 Version 1.4
----------------------------------------------------------------------
- Moved 4 files into ~/Sync/doc/journal structure.
  Some were still in DropBox.

----------------------------------------------------------------------
 2020-03-01
 Version 1.3
----------------------------------------------------------------------
- Added "invest" to file list.
- Purpose: Notes from investments events, etc.

----------------------------------------------------------------------
 2019-10-23
 Version 1.2
----------------------------------------------------------------------
Rename the "cprime" version to "work" in this code
Move the work file to Sync/journal/work/work_journal_file.txt

----------------------------------------------------------------------
 2018-06-21
 Version 1.1
----------------------------------------------------------------------
- Added the "job" file to the syntax.

----------------------------------------------------------------------
 2018-06-21
 Version 1.0
----------------------------------------------------------------------
- Works for parameters
  - <empty>, which opens the cPrime file
  - cprime, which opens the cPrime file, in my cPrime DropBox
  - personal, the personal file, in my private DropBox
  - agile, which opens a file in my local FS


